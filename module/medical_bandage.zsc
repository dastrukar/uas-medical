// AHHHHHHH, I NEED A MEDIC BAG
class UaS_SelfBandage : SelfBandage {
	int progress;
	int timer;
	int timeout;

	override void PostBeginPlay() {
		Super.PostBeginPlay();
		weaponstatus[0] = TYPE_BANDAGE;
		timer = 0;
		progress = 0;
	}

	override void DoEffect() {
		if (!(owner.player.ReadyWeapon is "UaS_SelfBandage")) { return; }
		wepmsg = "";
		if (timer >= 0) { --timer; }
		if (timeout >= 0) { --timeout; }
		if (timeout <= 0) {
			timer = 0;
			progress = 0;
		}

		if (
			timer <= 0
			&& owner.player.cmd.buttons & BT_FIREMODE
			&& !(owner.player.oldbuttons & BT_FIREMODE)
		) { ++weaponstatus[0]; }
		if (weaponstatus[0] > TYPE_BANDAGE) { weaponstatus[0] = TYPE_IMPROVISED; }
	}

	override void DrawHUDStuff(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl) {
		// Draw Weapon Status
		Super.DrawHUDStuff(sb, hdw, hpl);

		// debug
		Screen.DrawText(
			NewSmallFont,
			OptionMenuSettings.mFontColorValue,
			10, Screen.GetHeight() * 2 / 3,
			"type: "..weaponstatus[0].." | timer: "..timer.." | progress: "..progress.." | timeout: "..timeout
		);

		Vector2 hudScale = (1.00, 1.00);
		float textHeight = sb.pSmallFont.mFont.GetHeight() * hudscale.y;
		float padding = 2 * hudScale.y;
		float padStep = textHeight + padding;
		float baseOffset = (-8 * textHeight) + (-3 * padding);

		// Title
		sb.DrawString(
			sb.pSmallFont,
			"--- Bandaging ---",
			(0, baseOffset),
			sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_CENTER,
			Font.CR_GRAY,
			scale: hudScale
		);

		// Wounds
		let woundHandler = UaS_WoundHandler(hpl.FindInventory("UaS_WoundHandler"));
		for (int i = 0; woundHandler && i < woundHandler.critWounds.Size(); i++)
		{
			UaS_Wound wound = woundHandler.critWounds[i];
			if (!wound) { continue; }

			// location.x is the angle that you got hit from
			// location.y is the height that you got hit at
			sb.DrawString(
				sb.pSmallFont,
				"X",
				(50 * sin(wound.location.x), 50 * wound.location.y),
				sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_CENTER,
				Font.CR_RED,
				scale: hudScale
			);
		}
	}

	action void A_BandageEffect(int min, int max) {
		invoker.timer = Random(min, max);
		A_MuzzleClimb(FRandom(-1.5, 1.8), FRandom(-2.4, 2.4));
		A_StartSound("bandage/rustle", CHAN_BODY, CHANF_OVERLAP);
	}

	action void A_TryBandage() {
		invoker.timeout = 5;
		//if (invoker.progress == 0) {
		if (invoker.timer <= 0 && invoker.timeout <= 0) {
			invoker.timeout = 5;
			invoker.progress = 0;
			A_BandageEffect(5, 10);
			A_StartSound("bandage/rip", CHAN_WEAPON, CHANF_OVERLAP, 0.4);
			return;
		}
		else if (invoker.timer <= 0 && invoker.timeout > 0) { ++invoker.progress; }
		else { return; }

		switch (invoker.progress) {
			case 1:
				A_BandageEffect(30, 40);
				break;

			case 2:
				A_BandageEffect(30, 35);
				break;

			case 3:
				A_BandageEffect(15, 20);
				break;

			default:
				invoker.BandageWound(FRandom(20, 30), self);
				UaS_Wound(invoker.targetwound).pressure += frandom(0.025, 0.1);
				invoker.progress = 1;
				A_StartSound("bandage/pocket", CHAN_BODY, CHANF_OVERLAP);
				A_ChangeVelocity(FRandom(-0.3, 0.3), FRandom(-0.3, 0.3), FRandom(-1, 2));
				break;
		}
	}

	States {
		Try:
			TNT1 A 0 A_JumpIf(invoker.weaponstatus[0] != TYPE_IMPROVISED, "OverrideTry");
			goto Super::Try;

		OverrideTry:
			TNT1 A 0 A_JumpIf(IsMoving.Count(self) >= 4, "Abort");
			TNT1 A 0 A_TryBandage();
			goto Ready;
	}

	enum BandageTypes {
		TYPE_IMPROVISED,
		TYPE_BANDAGE,
	};
}
