extend class UaS_SelfBandage {
	ui void DrawWound(
	        HDStatusbar sb,
	        UaS_Wound wound,
	        Vector2 woundsLocation,
	        Vector2 gridSize,
	        Vector2 hudScale
	    ) {
		// location.x is the angle that you got hit from
		// location.y is the height that you got hit at
		Vector2 offset = (gridSize.x / 2.5, gridSize.y / 2.5);
		Vector2 woundPosition = (
			woundsLocation.x + (offset.x * sin(wound.location.x)) * hudScale.x,
			woundsLocation.y + (offset.y - (offset.y + offset.y) * wound.location.y) * hudScale.y
		);
		bool selected = (wound == currentWound);
		float woundAlpha = (selected)? 1.00 : 0.75;
		Vector2 woundScale = ((selected)? 1.00 : 0.75) * hudScale;
		int woundColour;
		if (wound.depth <= 0.) { woundColour = (wound == currentWound)? Font.CR_GOLD : Font.CR_YELLOW; }
		else { woundColour = (wound == currentWound)? Font.CR_RED : Font.CR_DARKRED; }

		sb.DrawString(
			sb.pSmallFont,
			"X",
			woundPosition,
			sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_CENTER,
			(selected)? Font.CR_RED : Font.CR_DARKRED,
			alpha: woundAlpha,
			scale: woundScale
		);
		sb.DrawString(
			sb.pSmallFont,
			"X",
			woundPosition,
			sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_CENTER,
			(selected)? Font.CR_GOLD : Font.CR_YELLOW,
			alpha: woundAlpha * wound.pressure / 5,
			scale: woundScale
		);
	}

	override void DrawHUDStuff(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl) {
		// Draw Weapon Status
		Super.DrawHUDStuff(sb, hdw, hpl);

		// debug
		Screen.DrawText(
			NewSmallFont,
			OptionMenuSettings.mFontColorValue,
			10, Screen.GetHeight() * 2 / 3,
			"type: "..weaponstatus[0].." | timer: "..timer.." | progress: "..progress.." | timeout: "..timeout
		);

		Vector2 hudScale = (1.00, 1.00);
		float textHeight = sb.pSmallFont.mFont.GetHeight() * hudscale.y;
		float padding = 2 * hudScale.y;
		float padStep = textHeight + padding;
		float baseOffset = padStep * -8;

		// Title
		sb.DrawString(
			sb.pSmallFont,
			"--- Bandaging ---",
			(0, baseOffset),
			sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_CENTER,
			Font.CR_GRAY,
			scale: hudScale
		);

		// Show wounds
		Vector2 woundsLocation = (-70 * hudScale.x, 0);

		// cool grid
		int gridAlpha = 25;
		Vector2 gridSize = (120 * hudScale.x, 120 * hudScale.y);
		Color gridColour = Color(gridAlpha, sb.sbcolour.r, sb.sbcolour.g, sb.sbcolour.b);
		Vector2 gridPos = (
			woundsLocation.x - (gridSize.x / 2),
			woundsLocation.y - (gridSize.y / 2)
		);
		sb.Fill(
			gridColour,
			gridPos.x - (2 * hudScale.x), gridPos.y,
			gridSize.x + (4 * hudScale.x), gridSize.y,
			sb.DI_SCREEN_CENTER
		);
		for (int i = 0; i < gridSize.y / 2; i++)
		{
			sb.Fill(
				gridColour,
				gridPos.x, gridPos.y + (i * 2),
				gridSize.x, hudScale.y,
				sb.DI_SCREEN_CENTER
			);
		}
		Vector2 gridStep = (10 * hudScale.x, 10 * hudScale.y);
		for (int i = 1; i < 12; i++)
		{
			sb.Fill(
				gridColour,
				gridPos.x + (gridStep.x * i), gridPos.y,
				hudScale.x, gridSize.y,
				sb.DI_SCREEN_CENTER
			);
			sb.Fill(
				gridColour,
				gridPos.x, gridPos.y + (gridStep.y * i),
				gridSize.x, hudScale.y,
				sb.DI_SCREEN_CENTER
			);
		}

		// Wound icons
		if (!wh) { return; }
		if (wh.critWounds.Size() == 0) {
			sb.DrawString(
				sb.pSmallFont,
				"You have no wounds.",
				woundsLocation,
				sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_CENTER,
				Font.CR_DARKGRAY,
				scale: hudScale
			);
		}

		UaS_Wound selectedWound;
		for (int i = 0; i < wh.critWounds.Size(); i++)
		{
			UaS_Wound wound = wh.critWounds[i];
			if (!wound) { continue; }
			if (i == woundIndex) { selectedWound = wound; }

			DrawWound(sb, wound, woundsLocation, gridSize, hudScale);
		}

		// Always display selected wound on top
		if (selectedWound) { DrawWound(sb, selectedWound, woundsLocation, gridSize, hudScale); }

		// Wound info
		Vector2 woundInfoPos = (10 * hudScale.x, baseOffset / 2);
		if (!selectedWound) {
			sb.DrawString(
				sb.pSmallFont,
				"No wound selected.",
				woundInfoPos,
				sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT,
				Font.CR_DARKGRAY
			);
		} else {
			string statusText = "\c[Red]open";
			if (selectedWound.depth <= 0. && selectedWound.patched > 0) { statusText = "\c[Yellow]patched"; }
			else if (selectedWound.depth <= 0) { statusText = "\c[Green]sealed"; }
			sb.DrawString(
				sb.pSmallFont,
				String.Format("- The wound is %s", statusText),
				woundInfoPos,
				sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT,
				Font.CR_GRAY
			);

			if (selectedWound.depth <= 0. && selectedWound.patched > 0) {
				woundInfoPos += (0, padStep);

				if (selectedWound.pressure > 5.0) { statusText = "\c[Green]very tight"; }
				else if (selectedWound.pressure > 3.5) { statusText = "\c[DarkGreen]tight"; }
				else if (selectedWound.pressure > 2.0) { statusText = "\c[Gold]a bit tight"; }
				else if (selectedWound.pressure > 1.0) { statusText = "\c[Yellow]somewhat tight"; }
				else if (selectedWound.pressure > 0.5) { statusText = "\c[Red]somewhat loose"; }
				else if (selectedWound.pressure > 0.2) { statusText = "\c[DarkRed]loose"; }
				else { statusText = "\c[Black]very loose"; }
				sb.DrawString(
					sb.pSmallFont,
					String.Format("- Bandage feels %s", statusText),
					woundInfoPos,
					sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT,
					Font.CR_GRAY
				);
			}

			woundInfoPos += (0, padStep);
			if (selectedWound.stabilised >= 100.0) { statusText = "\c[Green]fine"; }
			else if (selectedWound.stabilised > 75.0) { statusText = "\c[DarkGreen]somewhat fine"; }
			else if (selectedWound.stabilised > 50.0) { statusText = "\c[Gold]decent"; }
			else if (selectedWound.stabilised > 25.0) { statusText = "\c[Yellow]not that great"; }
			else if (selectedWound.stabilised > 5.0) { statusText = "\c[Red]less horrible"; }
			else { statusText = "\c[DarkRed]horrible"; }
			sb.DrawString(
				sb.pSmallFont,
				String.Format("- It feels %s", statusText),
				woundInfoPos,
				sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT,
				Font.CR_GRAY
			);
		}
	}
}

