// AHHHHHHH, I NEED A MEDIC BAG
class UaS_SelfBandage : UaS_MedicalTool {
	int progress;
	int timer;
	int timeout;
	string statusMessage;
	BandageActions actionType;

	Default {
		Tag "self bandage";
	}

	override void PostBeginPlay() {
		Super.PostBeginPlay();
		weaponstatus[0] = TYPE_BANDAGE;
		timer = 0;
		progress = 0;
		actionType = ACTION_NONE;
	}

	override string GetHelpText() {
		return WEPHELP_RELOAD.."/"..WEPHELP_ALTRELOAD.."  Cycle wounds\n";
	}

	void ResetAction() {
		timer = 0;
		progress = 0;
		actionType = ACTION_NONE;
	}

	override void DoEffect() {
		if (!(owner.player.ReadyWeapon is "UaS_SelfBandage")) { return; }

		Super.DoEffect();

		if (timer >= 0) { --timer; }
		if (timeout >= 0) { --timeout; }
		if (timeout <= 0) { ResetAction(); }

		CycleWounds();

		switch (weaponstatus[0]) {
			default:
				HandleBandage();
				break;
		}
		/*
		if (
			timer <= 0
			&& owner.player.cmd.buttons & BT_FIREMODE
			&& !(owner.player.oldbuttons & BT_FIREMODE)
		) { ++weaponstatus[0]; }
		if (weaponstatus[0] > TYPE_BANDAGE) { weaponstatus[0] = TYPE_IMPROVISED; }
		*/
	}

	// also updates wounds
	void CycleWounds() {
		if (wh.critwounds.Size() == 0) { return; }

		if (owner.player.cmd.buttons & BT_RELOAD && !(owner.player.oldbuttons & BT_RELOAD)) {
			wh.currentWound = wh.GetNextWound();
			ResetAction();
		}
		else if (owner.player.cmd.buttons & BT_ALTRELOAD && !(owner.player.oldbuttons & BT_ALTRELOAD)) {
			wh.currentWound = wh.GetPrevWound();
			ResetAction();
		}
	}

	void TryRipBloodbag() {
	}

	enum BandageTypes {
		TYPE_IMPROVISED,
		TYPE_BANDAGE,
	};

	enum BandageActions {
		ACTION_NONE,
		ACTION_BANDAGE,
		ACTION_RIPBANDAGE,
	};
}
